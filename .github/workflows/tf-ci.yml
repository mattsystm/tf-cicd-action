name: Terraform CI

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - develop
  #     - main

jobs:
  terraform_ci_dev:
    runs-on: ubuntu-latest
    environment: DEV

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Run a script
      run: |
        echo 'Hello ${{ vars.TF_API_TOKEN }}'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Init
      id: init
      run: terraform init
    
    - name: Terraform Validate
      id: validate
      run: terraform validate

    # If the CI fails, block merging the PR
    - name: Block PR Merge on Failure
      if: ${{ failure() }}
      run: echo "CI checks failed. Please fix the issues before merging." && exit 1

    # If the CI passes, enable merging the PR
    - name: Allow PR Merge on Success
      if: ${{ success() }}
      run: echo "CI checks passed. You can merge the PR now."


  
  terraform_ci_qa:
    runs-on: ubuntu-latest
    environment: QA
    needs: terraform_ci_dev
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Run a script
      run: |
        echo 'Hello ${{ vars.TF_API_TOKEN }}'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Init
      id: init
      run: terraform init
    
    - name: Terraform Validate
      id: validate
      run: terraform validate

    # If the CI fails, block merging the PR
    - name: Block PR Merge on Failure
      if: ${{ failure() }}
      run: echo "CI checks failed. Please fix the issues before merging." && exit 1

    # If the CI passes, enable merging the PR
    - name: Allow PR Merge on Success
      if: ${{ success() }}
      run: echo "CI checks passed. You can merge the PR now."
    
